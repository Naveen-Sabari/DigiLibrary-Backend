import { Component, Input, ElementRef } from '@angular/core';
import { CloudinaryImage } from '@cloudinary/url-gen/assets/CloudinaryImage';
import { cancelCurrentlyRunningPlugins, HtmlImageLayer } from '@cloudinary/html';
import { SDKAnalyticsConstants } from '../internal/SDKAnalyticsConstants';
import * as i0 from "@angular/core";
/**
 * @mixin AngularSDK
 * @description The Cloudinary Angular SDK contains components like \<advanced-image\> to easily render your media assets from
 * Cloudinary. The SDK also comes with support for optional JS plugins that make the components smart, with features
 * like lazy loading, placeholder, accessibility & responsiveness.
 *
 * @example
 * <caption>
 *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.
 * </caption>
 * // In your app.module.ts inject the library.
 * import { CloudinaryModule} from '@cloudinary/angular';
 *
 * imports: [
 *   ...,
 *   CloudinaryModule,
 * ],
 *
 * // In your component.ts use `@cloudinary/url-gen` to generate your transformations.
 * // Import the plugins you wish to use
 *
 * import {CloudinaryImage} from "@cloudinary/url-gen/assets/CloudinaryImage";
 * import {
 *  AdvancedImage,
 *  accessibility,
 *  responsive,
 *  lazyload,
 *  placeholder
 * } from '@cloudinary/angular';
 *
 * ngOnInit() {
 *   const myCld = new Cloudinary({ cloudName: 'demo'});
 *   this.img = myCld().image('sample');
 *
 *   this.plugins = [lazyload(), placeholder()]
 * }
 *
 * // In your view add the component with your transformation.
 * <advanced-image [cldImg]="this.img" [plugins]="this.plugins"></advanced-image>
 */
/**
 * @memberOf AngularSDK
 * @type {Component}
 * @description The Cloudinary image component.
 * @prop {CloudinaryImage} transformation Generated by @cloudinary/url-gen
 * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()
 * @prop imageAttributes Optional attributes include alt, width, height, loading
 */
export class CloudinaryImageComponent {
    constructor(el) {
        this.el = el;
    }
    /**
     * On init creates a new HTMLLayer instance and initializes with ref to img element,
     * user generated cloudinaryImage and the plugins to be used.
     */
    ngOnInit() {
        this.htmlLayerInstance = new HtmlImageLayer(this.el.nativeElement.children[0], this.cldImg, this.plugins, SDKAnalyticsConstants);
        this.syncAttributes();
    }
    /**
     * On update, we cancel running plugins and update the image instance with the state of user
     * cloudinaryImage and the state of plugins.
     */
    ngOnChanges() {
        if (this.htmlLayerInstance) {
            cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);
            this.htmlLayerInstance.update(this.cldImg, this.plugins, SDKAnalyticsConstants);
            this.syncAttributes();
        }
    }
    /**
     * On destroy, we cancel the currently running plugins.
     */
    ngOnDestroy() {
        // safely cancel running events on destroy
        cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);
    }
    /**
     * Add attributes to img element.
     */
    syncAttributes() {
        ['alt', 'width', 'height', 'loading'].forEach(attr => {
            if (this[attr]) {
                this.el.nativeElement.children[0].setAttribute(attr, this[attr]);
                this.el.nativeElement.removeAttribute(attr);
            }
        });
    }
}
CloudinaryImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CloudinaryImageComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
CloudinaryImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CloudinaryImageComponent, selector: "advanced-image", inputs: { cldImg: "cldImg", plugins: "plugins", alt: "alt", width: "width", height: "height", loading: "loading" }, usesOnChanges: true, ngImport: i0, template: `
    <img />
  `, isInline: true, styles: [":host{display:block}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CloudinaryImageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'advanced-image',
                    template: `
    <img />
  `,
                    styleUrls: ['./cloudinary-image.component.css']
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { cldImg: [{
                type: Input,
                args: ['cldImg']
            }], plugins: [{
                type: Input,
                args: ['plugins']
            }], alt: [{
                type: Input,
                args: ['alt']
            }], width: [{
                type: Input,
                args: ['width']
            }], height: [{
                type: Input,
                args: ['height']
            }], loading: [{
                type: Input,
                args: ['loading']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRpbmFyeS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Nsb3VkaW5hcnktaW1hZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQVUsS0FBSyxFQUFFLFVBQVUsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDRDQUE0QyxDQUFDO0FBQzNFLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IsY0FBYyxFQUVmLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sbUNBQW1DLENBQUM7O0FBRXhFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Q0c7QUFFSDs7Ozs7OztHQU9HO0FBUUgsTUFBTSxPQUFPLHdCQUF3QjtJQVFuQyxZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUFJLENBQUM7SUFFdkM7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDakksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsNkJBQTZCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLHFCQUFxQixDQUFDLENBQUM7WUFDaEYsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVztRQUNULDBDQUEwQztRQUMxQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsY0FBYztRQUNaLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25ELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNkLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDN0M7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O3NIQWpEVSx3QkFBd0I7MEdBQXhCLHdCQUF3QiwrTEFMekI7O0dBRVQ7NEZBR1Usd0JBQXdCO2tCQVBwQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRTs7R0FFVDtvQkFDRCxTQUFTLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQztpQkFDaEQ7aUdBRWtCLE1BQU07c0JBQXRCLEtBQUs7dUJBQUMsUUFBUTtnQkFDRyxPQUFPO3NCQUF4QixLQUFLO3VCQUFDLFNBQVM7Z0JBQ0YsR0FBRztzQkFBaEIsS0FBSzt1QkFBQyxLQUFLO2dCQUNJLEtBQUs7c0JBQXBCLEtBQUs7dUJBQUMsT0FBTztnQkFDRyxNQUFNO3NCQUF0QixLQUFLO3VCQUFDLFFBQVE7Z0JBQ0csT0FBTztzQkFBeEIsS0FBSzt1QkFBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgT25DaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q2xvdWRpbmFyeUltYWdlfSBmcm9tICdAY2xvdWRpbmFyeS91cmwtZ2VuL2Fzc2V0cy9DbG91ZGluYXJ5SW1hZ2UnO1xuaW1wb3J0IHtcbiAgY2FuY2VsQ3VycmVudGx5UnVubmluZ1BsdWdpbnMsXG4gIEh0bWxJbWFnZUxheWVyLFxuICBQbHVnaW5zXG59IGZyb20gJ0BjbG91ZGluYXJ5L2h0bWwnO1xuaW1wb3J0IHtTREtBbmFseXRpY3NDb25zdGFudHN9IGZyb20gJy4uL2ludGVybmFsL1NES0FuYWx5dGljc0NvbnN0YW50cyc7XG5cbi8qKlxuICogQG1peGluIEFuZ3VsYXJTREtcbiAqIEBkZXNjcmlwdGlvbiBUaGUgQ2xvdWRpbmFyeSBBbmd1bGFyIFNESyBjb250YWlucyBjb21wb25lbnRzIGxpa2UgXFw8YWR2YW5jZWQtaW1hZ2VcXD4gdG8gZWFzaWx5IHJlbmRlciB5b3VyIG1lZGlhIGFzc2V0cyBmcm9tXG4gKiBDbG91ZGluYXJ5LiBUaGUgU0RLIGFsc28gY29tZXMgd2l0aCBzdXBwb3J0IGZvciBvcHRpb25hbCBKUyBwbHVnaW5zIHRoYXQgbWFrZSB0aGUgY29tcG9uZW50cyBzbWFydCwgd2l0aCBmZWF0dXJlc1xuICogbGlrZSBsYXp5IGxvYWRpbmcsIHBsYWNlaG9sZGVyLCBhY2Nlc3NpYmlsaXR5ICYgcmVzcG9uc2l2ZW5lc3MuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxjYXB0aW9uPlxuICogIFBsZWFzZSBub3RlIHRoYXQgdGhlIG9yZGVyIG9mIHRoZSBwbHVnaW5zIGlzIGltcG9ydGFudC4gU2VlIHtAbGluayBodHRwczovL2Nsb3VkaW5hcnkuY29tL2RvY3VtZW50YXRpb24vc2Rrcy9qcy9mcm9udGVuZC1mcmFtZXdvcmtzL2luZGV4Lmh0bWwjcGx1Z2luLW9yZGVyfFBsdWdpbiBPcmRlcn0gZm9yIG1vcmUgZGV0YWlscy5cbiAqIDwvY2FwdGlvbj5cbiAqIC8vIEluIHlvdXIgYXBwLm1vZHVsZS50cyBpbmplY3QgdGhlIGxpYnJhcnkuXG4gKiBpbXBvcnQgeyBDbG91ZGluYXJ5TW9kdWxlfSBmcm9tICdAY2xvdWRpbmFyeS9hbmd1bGFyJztcbiAqXG4gKiBpbXBvcnRzOiBbXG4gKiAgIC4uLixcbiAqICAgQ2xvdWRpbmFyeU1vZHVsZSxcbiAqIF0sXG4gKlxuICogLy8gSW4geW91ciBjb21wb25lbnQudHMgdXNlIGBAY2xvdWRpbmFyeS91cmwtZ2VuYCB0byBnZW5lcmF0ZSB5b3VyIHRyYW5zZm9ybWF0aW9ucy5cbiAqIC8vIEltcG9ydCB0aGUgcGx1Z2lucyB5b3Ugd2lzaCB0byB1c2VcbiAqXG4gKiBpbXBvcnQge0Nsb3VkaW5hcnlJbWFnZX0gZnJvbSBcIkBjbG91ZGluYXJ5L3VybC1nZW4vYXNzZXRzL0Nsb3VkaW5hcnlJbWFnZVwiO1xuICogaW1wb3J0IHtcbiAqICBBZHZhbmNlZEltYWdlLFxuICogIGFjY2Vzc2liaWxpdHksXG4gKiAgcmVzcG9uc2l2ZSxcbiAqICBsYXp5bG9hZCxcbiAqICBwbGFjZWhvbGRlclxuICogfSBmcm9tICdAY2xvdWRpbmFyeS9hbmd1bGFyJztcbiAqXG4gKiBuZ09uSW5pdCgpIHtcbiAqICAgY29uc3QgbXlDbGQgPSBuZXcgQ2xvdWRpbmFyeSh7IGNsb3VkTmFtZTogJ2RlbW8nfSk7XG4gKiAgIHRoaXMuaW1nID0gbXlDbGQoKS5pbWFnZSgnc2FtcGxlJyk7XG4gKlxuICogICB0aGlzLnBsdWdpbnMgPSBbbGF6eWxvYWQoKSwgcGxhY2Vob2xkZXIoKV1cbiAqIH1cbiAqXG4gKiAvLyBJbiB5b3VyIHZpZXcgYWRkIHRoZSBjb21wb25lbnQgd2l0aCB5b3VyIHRyYW5zZm9ybWF0aW9uLlxuICogPGFkdmFuY2VkLWltYWdlIFtjbGRJbWddPVwidGhpcy5pbWdcIiBbcGx1Z2luc109XCJ0aGlzLnBsdWdpbnNcIj48L2FkdmFuY2VkLWltYWdlPlxuICovXG5cbi8qKlxuICogQG1lbWJlck9mIEFuZ3VsYXJTREtcbiAqIEB0eXBlIHtDb21wb25lbnR9XG4gKiBAZGVzY3JpcHRpb24gVGhlIENsb3VkaW5hcnkgaW1hZ2UgY29tcG9uZW50LlxuICogQHByb3Age0Nsb3VkaW5hcnlJbWFnZX0gdHJhbnNmb3JtYXRpb24gR2VuZXJhdGVkIGJ5IEBjbG91ZGluYXJ5L3VybC1nZW5cbiAqIEBwcm9wIHtQbHVnaW5zfSBwbHVnaW5zIEFkdmFuY2VkIGltYWdlIGNvbXBvbmVudCBwbHVnaW5zIGFjY2Vzc2liaWxpdHkoKSwgcmVzcG9uc2l2ZSgpLCBsYXp5bG9hZCgpLCBwbGFjZWhvbGRlcigpXG4gKiBAcHJvcCBpbWFnZUF0dHJpYnV0ZXMgT3B0aW9uYWwgYXR0cmlidXRlcyBpbmNsdWRlIGFsdCwgd2lkdGgsIGhlaWdodCwgbG9hZGluZ1xuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhZHZhbmNlZC1pbWFnZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGltZyAvPlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9jbG91ZGluYXJ5LWltYWdlLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBDbG91ZGluYXJ5SW1hZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCdjbGRJbWcnKSBjbGRJbWc6IENsb3VkaW5hcnlJbWFnZTtcbiAgQElucHV0KCdwbHVnaW5zJykgcGx1Z2luczogUGx1Z2lucztcbiAgQElucHV0KCdhbHQnKSBhbHQ6IHN0cmluZztcbiAgQElucHV0KCd3aWR0aCcpIHdpZHRoOiBzdHJpbmc7XG4gIEBJbnB1dCgnaGVpZ2h0JykgaGVpZ2h0OiBzdHJpbmc7XG4gIEBJbnB1dCgnbG9hZGluZycpIGxvYWRpbmc6IHN0cmluZztcbiAgaHRtbExheWVySW5zdGFuY2U6IEh0bWxJbWFnZUxheWVyO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cblxuICAvKipcbiAgICogT24gaW5pdCBjcmVhdGVzIGEgbmV3IEhUTUxMYXllciBpbnN0YW5jZSBhbmQgaW5pdGlhbGl6ZXMgd2l0aCByZWYgdG8gaW1nIGVsZW1lbnQsXG4gICAqIHVzZXIgZ2VuZXJhdGVkIGNsb3VkaW5hcnlJbWFnZSBhbmQgdGhlIHBsdWdpbnMgdG8gYmUgdXNlZC5cbiAgICovXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaHRtbExheWVySW5zdGFuY2UgPSBuZXcgSHRtbEltYWdlTGF5ZXIodGhpcy5lbC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdLCB0aGlzLmNsZEltZywgdGhpcy5wbHVnaW5zLCBTREtBbmFseXRpY3NDb25zdGFudHMpO1xuICAgIHRoaXMuc3luY0F0dHJpYnV0ZXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbiB1cGRhdGUsIHdlIGNhbmNlbCBydW5uaW5nIHBsdWdpbnMgYW5kIHVwZGF0ZSB0aGUgaW1hZ2UgaW5zdGFuY2Ugd2l0aCB0aGUgc3RhdGUgb2YgdXNlclxuICAgKiBjbG91ZGluYXJ5SW1hZ2UgYW5kIHRoZSBzdGF0ZSBvZiBwbHVnaW5zLlxuICAgKi9cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuaHRtbExheWVySW5zdGFuY2UpIHtcbiAgICAgIGNhbmNlbEN1cnJlbnRseVJ1bm5pbmdQbHVnaW5zKHRoaXMuaHRtbExheWVySW5zdGFuY2UuaHRtbFBsdWdpblN0YXRlKTtcbiAgICAgIHRoaXMuaHRtbExheWVySW5zdGFuY2UudXBkYXRlKHRoaXMuY2xkSW1nLCB0aGlzLnBsdWdpbnMsIFNES0FuYWx5dGljc0NvbnN0YW50cyk7XG4gICAgICB0aGlzLnN5bmNBdHRyaWJ1dGVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9uIGRlc3Ryb3ksIHdlIGNhbmNlbCB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcGx1Z2lucy5cbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIC8vIHNhZmVseSBjYW5jZWwgcnVubmluZyBldmVudHMgb24gZGVzdHJveVxuICAgIGNhbmNlbEN1cnJlbnRseVJ1bm5pbmdQbHVnaW5zKHRoaXMuaHRtbExheWVySW5zdGFuY2UuaHRtbFBsdWdpblN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYXR0cmlidXRlcyB0byBpbWcgZWxlbWVudC5cbiAgICovXG4gIHN5bmNBdHRyaWJ1dGVzKCkge1xuICAgIFsnYWx0JywgJ3dpZHRoJywgJ2hlaWdodCcsICdsb2FkaW5nJ10uZm9yRWFjaChhdHRyID0+IHtcbiAgICAgIGlmICh0aGlzW2F0dHJdKSB7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoYXR0ciwgdGhpc1thdHRyXSk7XG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==